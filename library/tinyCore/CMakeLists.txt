#
# 项目名
#
SET(PROGRAM_NAME tinyCore)


#
# 设置宏定义
#
ADD_DEFINITIONS(-DRAPIDJSON_SSE2
				-DRAPIDJSON_HAS_STDSTRING
				-DBOOST_LOG_DYN_LINK
				-DBOOST_REGEX_DYN_LINK
)


#
# 获取当前目录下源文件
#
TRAVERSE_CURRENT_SOURCE_FILE(SOURCE_FILES)


#
# 链接源文件, 生成静态库文件
# 链接源文件, 生成动态库文件
#
ADD_LIBRARY(${PROGRAM_NAME}			STATIC	${SOURCE_FILES})
ADD_LIBRARY(${PROGRAM_NAME}_shared	SHARED	${SOURCE_FILES})


#
# 链接库文件
#
TARGET_LINK_LIBRARIES(${PROGRAM_NAME}  PUBLIC	stdc++fs
												sqlite3
												fmt
												curl
												-L${CURL_SOFTWARE_LIBRARY_PATH}
												boost_system
												-L${BOOST_SOFTWARE_LIBRARY_PATH}
												ssl
												crypto
												-L${OPENSSL_SOFTWARE_LIBRARY_PATH}
												memcached
												-L${LIBMEMCACHED_SOFTWARE_LIBRARY_PATH}
)


#
# 链接头文件
#
TARGET_INCLUDE_DIRECTORIES(${PROGRAM_NAME}	PUBLIC	${CURL_SOFTWARE_INCLUDE_PATH}
													${BOOST_SOFTWARE_INCLUDE_PATH}
													${OPENSSL_SOFTWARE_INCLUDE_PATH}
													${LIBMEMCACHED_SOFTWARE_INCLUDE_PATH}
)


#
# 指定库文件的输出名称
#
SET_TARGET_PROPERTIES(${PROGRAM_NAME}			PROPERTIES OUTPUT_NAME ${PROGRAM_NAME})
SET_TARGET_PROPERTIES(${PROGRAM_NAME}_shared	PROPERTIES OUTPUT_NAME ${PROGRAM_NAME})


#
# 使动态库和静态库同时存在
#
SET_TARGET_PROPERTIES(${PROGRAM_NAME}			PROPERTIES CLEAN_DIRECT_OUTPUT 1)
SET_TARGET_PROPERTIES(${PROGRAM_NAME}_shared	PROPERTIES CLEAN_DIRECT_OUTPUT 1)


#
# 设置库版本号
#
SET_TARGET_PROPERTIES(${PROGRAM_NAME}_shared	PROPERTIES VERSION 1.0.1 SOVERSION 1.0)


#
# 库文件的生成目录
#
SET(LIBRARY_OUTPUT_PATH ${PROJECT_BINARY_DIR}/lib)
